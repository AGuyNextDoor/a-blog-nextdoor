{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useEffect } from \"react\";\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport allTopics from \"../allTopics.js\";\n\nconst listGenerator = (topicName, path, topic = \"\") => {\n  if (!topic) {\n    let topic = allTopics.filter(element => {\n      return path.includes(element);\n    });\n    topic = topic[0];\n  }\n\n  if (topic.length > 1) {\n    topic = topic[0];\n  }\n\n  const linkUrl = \"/\" + topic + \"/\" + topicName;\n\n  if (linkUrl.includes(\".\") && typeof linkUrl === \"string\" && typeof topicName === \"string\") {\n    let topicTrimmed = topicName.split(\".\").slice(0, -1).join(\".\");\n    topicTrimmed = topicTrimmed.replace(/_/g, \" \");\n    topicTrimmed = topicTrimmed.replace(/-/g, \" \");\n    let pathTrimmed = decodeURI(path);\n    pathTrimmed = pathTrimmed.split(\".\").slice(0, -1).join(\".\");\n    pathTrimmed = pathTrimmed.replace(/_/g, \" \");\n    pathTrimmed = pathTrimmed.replace(/-/g, \" \");\n\n    if (pathTrimmed.includes(topicTrimmed)) {\n      return __jsx(\"li\", {\n        class: \"nav-item flex-fill p-2 sidebar-item active\"\n      }, __jsx(Link, {\n        class: \"nav-link\",\n        to: linkUrl,\n        href: topicName\n      }, topicTrimmed));\n    } else {\n      return __jsx(\"li\", {\n        class: \"nav-item flex-fill p-2 sidebar-item\"\n      }, __jsx(Link, {\n        class: \"nav-link\",\n        to: linkUrl,\n        href: topicName\n      }, topicTrimmed));\n    }\n  } else {\n    if (path.includes(topicName)) {\n      return __jsx(\"li\", {\n        class: \"nav-item flex-fill p-2 sidebar-item active\"\n      }, __jsx(Link, {\n        class: \"nav-link\",\n        to: linkUrl,\n        href: topicName\n      }, topicName));\n    } else {\n      return __jsx(\"li\", {\n        class: \"nav-item flex-fill p-2 sidebar-item\"\n      }, __jsx(Link, {\n        class: \"nav-link\",\n        to: linkUrl,\n        href: topicName\n      }, topicName));\n    }\n  }\n};\n\nlet test = 0;\nlet tested = 0;\n\nconst Sidebar = ({\n  match,\n  location\n}) => {\n  const {\n    0: sidebarState,\n    1: updatesideBarState\n  } = useState([]);\n  let flag = true;\n\n  const sidebarContext = path => {\n    let topic = allTopics.filter(element => {\n      return path.includes(element);\n    });\n    return sidebarState.map(element => {\n      return listGenerator(element, path, topic);\n    });\n  };\n\n  const stateUpdate = path => {\n    let topic = allTopics.filter(element => {\n      return path.includes(element);\n    });\n    console.log({\n      topic\n    });\n\n    switch (topic[0]) {\n      case \"Drawings\":\n        getImagesDir(updatesideBarState);\n        break;\n\n      case \"Articles\":\n        if (test !== 0) {\n          if (tested < 1) {\n            window.location.reload();\n          }\n\n          tested += 1;\n        }\n\n        getList(updatesideBarState);\n        break;\n\n      case \"Reflections\":\n        getReflectionList(updatesideBarState);\n        break;\n\n      default:\n        flag = false;\n        empty(updatesideBarState);\n    }\n  };\n\n  useEffect(() => {\n    stateUpdate(location.pathname);\n    test += 1;\n  }, [location.pathname, flag]);\n  return __jsx(\"div\", {\n    class: \"col-lg bg-light navbar_expand\"\n  }, sidebarState[0] === true ? __jsx(\"div\", {\n    class: \"col-lg bg-light flex-wrap second_navbar\"\n  }, __jsx(\"nav\", {\n    class: \"flex-md-nowrap navbar-expand\"\n  }, __jsx(\"ul\", {\n    class: \"navbar-nav sidebar-nav\"\n  }, sidebarState ? sidebarContext(location.pathname) : __jsx(\"div\", {\n    class: \"spinner-grow justify-content-center\",\n    role: \"status\"\n  }, __jsx(\"span\", {\n    class: \"sr-only\"\n  }, \"Loading...\"))))) : __jsx(\"div\", null, \"plop\"));\n};\n\nexport default Sidebar;\n\nfunction importAll(r) {\n  return r.keys().map(r);\n}\n\nconst getImagesDir = async callback => {\n  const folders = await fetch(\"/api/getImagesDir\").then(res => res.json());\n  return callback([true, ...folders]);\n};\n\nconst getList = async callback => {\n  let result = await fetch(\"/api/getArticles\").then(res => res.json()); // .then((list) => updateListState(list));\n\n  callback([true, ...result]);\n};\n\nconst getReflectionList = async callback => {\n  let result = await fetch(\"/api/getReflectionList\").then(res => res.json()); // .then((list) => updateListState(list));\n\n  callback([true, ...result]);\n};\n\nconst empty = callback => {\n  callback([false]);\n};","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/martinvielvoye/a-blog-nextdoor/client/pages/Reflections/[reflection_name].js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState, useEffect, Component } from \"react\";\nimport { BrowserRouter as Router, Link } from \"react-router-dom\";\nimport { useRouter } from \"next/router\";\nimport Image from \"next/image\";\nimport ReactDOM from \"react-dom\"; // import path from \"path\";\n\nconst Reflection = () => {\n  _s();\n\n  const {\n    0: reflectionState,\n    1: updateReflectionState\n  } = useState();\n  const router = useRouter(); // Retrieves the list of items from the Express app\n\n  let title = \"Loading...\";\n\n  const getReflection = () => {\n    fetch(\"/reflections/\" + router.query).then(res => {\n      return res.json();\n    }).then(data => {\n      title = match.params.reflectionId;\n      updateReflectionState(data[1]);\n    });\n  };\n\n  useEffect(() => {\n    getReflection();\n  }, [reflectionState, title, match.params.reflectionId]);\n  getReflection();\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 5\n    }\n  }, reflectionState ? __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }\n  }, ReactHtmlParser(reflectionState)) : __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }\n  }));\n};\n\n_s(Reflection, \"zngVoRGIE/qGU7QUGy9t0nh86vU=\", false, function () {\n  return [useRouter];\n});\n\n_c = Reflection;\nexport default Reflection;\n\nvar _c;\n\n$RefreshReg$(_c, \"Reflection\");","map":{"version":3,"sources":["/Users/martinvielvoye/a-blog-nextdoor/client/pages/Reflections/[reflection_name].js"],"names":["React","useState","useEffect","Component","BrowserRouter","Router","Link","useRouter","Image","ReactDOM","Reflection","reflectionState","updateReflectionState","router","title","getReflection","fetch","query","then","res","json","data","match","params","reflectionId","ReactHtmlParser"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,SAArC,QAAsD,OAAtD;AACA,SAASC,aAAa,IAAIC,MAA1B,EAAkCC,IAAlC,QAA8C,kBAA9C;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,OAAOC,KAAP,MAAkB,YAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB,C,CACA;;AAEA,MAAMC,UAAU,GAAG,MAAM;AAAA;;AACvB,QAAM;AAAA,OAACC,eAAD;AAAA,OAAkBC;AAAlB,MAA2CX,QAAQ,EAAzD;AACA,QAAMY,MAAM,GAAGN,SAAS,EAAxB,CAFuB,CAIvB;;AACA,MAAIO,KAAK,GAAG,YAAZ;;AACA,QAAMC,aAAa,GAAG,MAAM;AAC1BC,IAAAA,KAAK,CAAC,kBAAkBH,MAAM,CAACI,KAA1B,CAAL,CACGC,IADH,CACSC,GAAD,IAAS;AACb,aAAOA,GAAG,CAACC,IAAJ,EAAP;AACD,KAHH,EAIGF,IAJH,CAISG,IAAD,IAAU;AACdP,MAAAA,KAAK,GAAGQ,KAAK,CAACC,MAAN,CAAaC,YAArB;AACAZ,MAAAA,qBAAqB,CAACS,IAAI,CAAC,CAAD,CAAL,CAArB;AACD,KAPH;AAQD,GATD;;AAWAnB,EAAAA,SAAS,CAAC,MAAM;AACda,IAAAA,aAAa;AACd,GAFQ,EAEN,CAACJ,eAAD,EAAkBG,KAAlB,EAAyBQ,KAAK,CAACC,MAAN,CAAaC,YAAtC,CAFM,CAAT;AAIAT,EAAAA,aAAa;AAEb,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGJ,eAAe,GACd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEGc,eAAe,CAACd,eAAD,CAFlB,CADc,GAMd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPJ,CADF;AAYD,CAnCD;;GAAMD,U;UAEWH,S;;;KAFXG,U;AAqCN,eAAeA,UAAf","sourcesContent":["import React, { useState, useEffect, Component } from \"react\";\nimport { BrowserRouter as Router, Link } from \"react-router-dom\";\nimport { useRouter } from \"next/router\";\nimport Image from \"next/image\";\nimport ReactDOM from \"react-dom\";\n// import path from \"path\";\n\nconst Reflection = () => {\n  const [reflectionState, updateReflectionState] = useState();\n  const router = useRouter()\n\n  // Retrieves the list of items from the Express app\n  let title = \"Loading...\";\n  const getReflection = () => {\n    fetch(\"/reflections/\" + router.query)\n      .then((res) => {\n        return res.json();\n      })\n      .then((data) => {\n        title = match.params.reflectionId;\n        updateReflectionState(data[1]);\n      });\n  };\n\n  useEffect(() => {\n    getReflection();\n  }, [reflectionState, title, match.params.reflectionId]);\n\n  getReflection();\n\n  return (\n    <div>\n      {reflectionState ? (\n        <div>\n          {/* <div dangerouslySetInnerHTML={{ __html: reflectionState }} /> */}\n          {ReactHtmlParser(reflectionState)}\n        </div>\n      ) : (\n        <div></div>\n      )}\n    </div>\n  );\n};\n\nexport default Reflection\n"]},"metadata":{},"sourceType":"module"}
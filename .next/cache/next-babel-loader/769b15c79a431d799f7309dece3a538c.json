{"ast":null,"code":"var _jsxFileName = \"/Users/martinvielvoye/a-blog-nextdoor/client/pages/Drawings/index.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect, Component } from \"react\";\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport ReactDOM from \"react-dom\";\nimport path from \"path\";\nimport { useRouter } from \"next/router\"; // import fs from \"fs\";\n\nimport util from \"util\";\nimport getConfig from \"next/config\";\nconst {\n  serverRuntimeConfig\n} = getConfig();\n\nfunction topThreeImages(imgGroup) {\n  let category = imgGroup[0];\n  let urls = imgGroup[1]; // result = completeUrl.map((url) => {\n  //   console.log({ url });\n  //   if (url.match(/(?<=\\.)(.*?)(?=\\.)/g)[0] === imgGroup) {\n  //     return url;\n  //   }\n  // });\n  // result = result.filter((url) => {\n  //   if (url) {\n  //     return url;\n  //   }\n  // });\n\n  return urls;\n}\n\nconst getImageDir = async callback => {\n  // const folders = await fetch(\"/api/getImagesDir\").then((res) => res.json());\n  console.log(\"plop\");\n  const folders = await fetch(\"/\").then(res => res.json());\n  console.log({\n    folders\n  });\n  return callback(folders);\n};\n\nconst Images = () => {\n  const {\n    0: imageState,\n    1: updateImageState\n  } = useState([]);\n  const location = useRouter();\n\n  const imagePile = imgGroup => {\n    const urls = topThreeImages(imgGroup);\n    console.log({\n      urls\n    });\n    return __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 7\n      }\n    }, __jsx(\"div\", {\n      id: \"photo\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }\n    }, __jsx(Link, {\n      to: \"/Drawings/\" + imgGroup[0],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }\n    }, __jsx(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 13\n      }\n    }, imgGroup[0])), __jsx(\"div\", {\n      id: \"photo-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }\n    }, __jsx(\"div\", {\n      id: \"small_1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 13\n      }\n    }, __jsx(Link, {\n      to: \"/Drawings/\" + imgGroup[0],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 15\n      }\n    }, __jsx(\"img\", {\n      id: \"copy\",\n      src: \"/drawings/\" + imgGroup[0] + \"/thumbnails/\" + urls[0],\n      class: \"img-thumbnail rounded\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }\n    }))), __jsx(\"div\", {\n      id: \"small_2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 13\n      }\n    }, __jsx(Link, {\n      to: \"/Drawings/\" + imgGroup[0],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 15\n      }\n    }, __jsx(\"img\", {\n      id: \"copy\",\n      src: \"/drawings/\" + imgGroup[0] + \"/thumbnails/\" + urls[1],\n      class: \" img-thumbnail rounded\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }\n    }))), __jsx(\"div\", {\n      id: \"small_3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 13\n      }\n    }, __jsx(Link, {\n      to: \"/Drawings/\" + imgGroup[0],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 15\n      }\n    }, __jsx(\"img\", {\n      id: \"copy\",\n      src: \"/drawings/\" + imgGroup[0] + \"/thumbnails/\" + urls[2],\n      class: \"img-thumbnail rounded\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }\n    }))))));\n  };\n\n  useEffect(() => {\n    getImages(updateImageState);\n    console.log(imageState);\n  }, []);\n  return __jsx(\"div\", {\n    className: \"text-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 5\n    }\n  }, imageState.length ? __jsx(\"div\", {\n    id: \"main\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }\n  }, imageState.map(imgGroup => {\n    console.log({\n      imgGroup\n    });\n    return imagePile(imgGroup);\n  })) : __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 9\n    }\n  }, \"Loading...\"));\n};\n\nconst getImages = async callback => {\n  // let result = await fetch(\"/api/getThumbnails\").then((res) => res.json());\n  let result = await fetch(\"/drawingsURL.json\").then(res => res.json());\n  console.log({\n    result\n  });\n  callback(result);\n};\n\nconst Folder = ({\n  match,\n  props\n}) => {\n  const {\n    0: folderState,\n    1: updateFolderState\n  } = useState([]);\n\n  const getFolder = () => {\n    console.log(props.urlList); // const uploadsDirectory = path.join(__dirname, \"../../images/\");\n    // const completeUrl = importAll(require.context(\"../../images/\", false, /\\.(png|jpe?g|svg)$/));\n    // const completeFolder = allFolder(require.context(\"../../images/\", false, /\\.(png|jpe?g|svg)$/)));\n\n    getImages(props.urlList);\n  };\n\n  getFolder();\n  useEffect(() => {\n    getImages(updateFolderState);\n  }, []);\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 10\n    }\n  }, folderState);\n};\n\nexport default Images;","map":{"version":3,"sources":["/Users/martinvielvoye/a-blog-nextdoor/client/pages/Drawings/index.js"],"names":["React","useState","useEffect","Component","BrowserRouter","Router","Route","Link","ReactDOM","path","useRouter","util","getConfig","serverRuntimeConfig","topThreeImages","imgGroup","category","urls","getImageDir","callback","console","log","folders","fetch","then","res","json","Images","imageState","updateImageState","location","imagePile","getImages","length","map","result","Folder","match","props","folderState","updateFolderState","getFolder","urlList"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, Component } from \"react\";\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport ReactDOM from \"react-dom\";\nimport path from \"path\";\nimport { useRouter } from \"next/router\";\n// import fs from \"fs\";\nimport util from \"util\";\nimport getConfig from \"next/config\";\nconst { serverRuntimeConfig } = getConfig();\n\nfunction topThreeImages(imgGroup) {\n  let category = imgGroup[0];\n  let urls = imgGroup[1];\n\n  // result = completeUrl.map((url) => {\n  //   console.log({ url });\n  //   if (url.match(/(?<=\\.)(.*?)(?=\\.)/g)[0] === imgGroup) {\n  //     return url;\n  //   }\n  // });\n\n  // result = result.filter((url) => {\n  //   if (url) {\n  //     return url;\n  //   }\n  // });\n\n  return urls;\n}\n\nconst getImageDir = async (callback) => {\n  // const folders = await fetch(\"/api/getImagesDir\").then((res) => res.json());\n  console.log(\"plop\");\n  const folders = await fetch(\"/\").then((res) => res.json());\n\n  console.log({folders});\n\n  return callback(folders);\n};\n\nconst Images = () => {\n  const [imageState, updateImageState] = useState([]);\n  const location = useRouter()\n\n  const imagePile = (imgGroup) => {\n    const urls = topThreeImages(imgGroup);\n\n    console.log({ urls });\n\n    return (\n      <div>\n        <div id=\"photo\">\n          <Link to={\"/Drawings/\" + imgGroup[0]}>\n            <h2>{imgGroup[0]}</h2>\n          </Link>\n          <div id=\"photo-center\">\n            <div id=\"small_1\">\n              <Link to={\"/Drawings/\" + imgGroup[0]}>\n                <img\n                  id=\"copy\"\n                  src={\"/drawings/\" + imgGroup[0] + \"/thumbnails/\" + urls[0]}\n                  class=\"img-thumbnail rounded\"\n                ></img>\n              </Link>\n            </div>\n            <div id=\"small_2\">\n              <Link to={\"/Drawings/\" + imgGroup[0]}>\n                <img\n                  id=\"copy\"\n                  src={\"/drawings/\" + imgGroup[0] + \"/thumbnails/\" + urls[1]}\n                  class=\" img-thumbnail rounded\"\n                ></img>\n              </Link>\n            </div>\n            <div id=\"small_3\">\n              <Link to={\"/Drawings/\" + imgGroup[0]}>\n                <img\n                  id=\"copy\"\n                  src={\"/drawings/\" + imgGroup[0] + \"/thumbnails/\" + urls[2]}\n                  class=\"img-thumbnail rounded\"\n                ></img>\n              </Link>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  useEffect(() => {\n    getImages(updateImageState);\n    console.log(imageState);\n  }, []);\n\n  return (\n    <div className=\"text-center\">\n      {imageState.length ? (\n        <div id=\"main\">\n          {imageState.map((imgGroup) => {\n            console.log({ imgGroup });\n            return imagePile(imgGroup);\n          })}\n        </div>\n      ) : (\n        <div>Loading...</div>\n      )}\n      {/* <Route path={`${process.env.URL + location.pathname}/:groupName`} urlList={imageState} component={Folder} /> */}\n    </div>\n  );\n};\n\nconst getImages = async (callback) => {\n  // let result = await fetch(\"/api/getThumbnails\").then((res) => res.json());\n  let result = await fetch(\"/drawingsURL.json\").then((res) => res.json());\n  console.log({result})\n\n  callback(result);\n};\n\nconst Folder = ({ match, props }) => {\n  const [folderState, updateFolderState] = useState([]);\n\n  const getFolder = () => {\n    console.log(props.urlList);\n    // const uploadsDirectory = path.join(__dirname, \"../../images/\");\n\n    // const completeUrl = importAll(require.context(\"../../images/\", false, /\\.(png|jpe?g|svg)$/));\n    // const completeFolder = allFolder(require.context(\"../../images/\", false, /\\.(png|jpe?g|svg)$/)));\n\n    getImages(props.urlList);\n  };\n\n  getFolder();\n\n  useEffect(() => {\n    getImages(updateFolderState);\n  }, []);\n\n  return <div>{folderState}</div>;\n};\n\nexport default Images;\n"]},"metadata":{},"sourceType":"module"}
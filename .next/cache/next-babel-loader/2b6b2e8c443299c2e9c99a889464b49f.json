{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nexports.__esModule = true;\nexports.default = Image;\n\nvar _objectWithoutPropertiesLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutPropertiesLoose\"));\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _head = _interopRequireDefault(require(\"../next-server/lib/head\"));\n\nconst VALID_LOADING_VALUES = ['lazy', 'eager', undefined];\nconst loaders = new Map([['imgix', imgixLoader], ['cloudinary', cloudinaryLoader], ['akamai', akamaiLoader], ['default', defaultLoader]]);\nconst imageData = process.env.__NEXT_IMAGE_OPTS;\nconst {\n  deviceSizes: configDeviceSizes,\n  imageSizes: configImageSizes,\n  loader: configLoader,\n  path: configPath,\n  domains: configDomains\n} = imageData; // sort smallest to largest\n\nconfigDeviceSizes.sort((a, b) => a - b);\nconfigImageSizes.sort((a, b) => a - b);\nlet cachedObserver;\nconst IntersectionObserver = false ? window.IntersectionObserver : null;\n\nfunction getObserver() {\n  // Return shared instance of IntersectionObserver if already created\n  if (cachedObserver) {\n    return cachedObserver;\n  } // Only create shared IntersectionObserver if supported in browser\n\n\n  if (!IntersectionObserver) {\n    return undefined;\n  }\n\n  return cachedObserver = new IntersectionObserver(entries => {\n    entries.forEach(entry => {\n      if (entry.isIntersecting) {\n        let lazyImage = entry.target;\n\n        if (lazyImage.dataset.src) {\n          lazyImage.src = lazyImage.dataset.src;\n        }\n\n        if (lazyImage.dataset.srcset) {\n          lazyImage.srcset = lazyImage.dataset.srcset;\n        }\n\n        lazyImage.style.visibility = 'visible';\n        lazyImage.classList.remove('__lazy');\n        cachedObserver.unobserve(lazyImage);\n      }\n    });\n  }, {\n    rootMargin: '200px'\n  });\n}\n\nfunction getDeviceSizes(width) {\n  if (typeof width !== 'number') {\n    return configDeviceSizes;\n  }\n\n  if (configImageSizes.includes(width)) {\n    return [width];\n  }\n\n  const widths = [];\n\n  for (let size of configDeviceSizes) {\n    widths.push(size);\n\n    if (size >= width) {\n      break;\n    }\n  }\n\n  return widths;\n}\n\nfunction computeSrc(src, unoptimized, width, quality) {\n  if (unoptimized) {\n    return src;\n  }\n\n  const widths = getDeviceSizes(width);\n  const largest = widths[widths.length - 1];\n  return callLoader({\n    src,\n    width: largest,\n    quality\n  });\n}\n\nfunction callLoader(loaderProps) {\n  const load = loaders.get(configLoader) || defaultLoader;\n  return load((0, _extends2.default)({\n    root: configPath\n  }, loaderProps));\n}\n\nfunction generateSrcSet({\n  src,\n  unoptimized,\n  width,\n  quality\n}) {\n  // At each breakpoint, generate an image url using the loader, such as:\n  // ' www.example.com/foo.jpg?w=480 480w, '\n  if (unoptimized) {\n    return undefined;\n  }\n\n  return getDeviceSizes(width).map(w => `${callLoader({\n    src,\n    width: w,\n    quality\n  })} ${w}w`).join(', ');\n}\n\nfunction generatePreload({\n  src,\n  width,\n  unoptimized = false,\n  sizes,\n  quality\n}) {\n  // This function generates an image preload that makes use of the \"imagesrcset\" and \"imagesizes\"\n  // attributes for preloading responsive images. They're still experimental, but fully backward\n  // compatible, as the link tag includes all necessary attributes, even if the final two are ignored.\n  // See: https://web.dev/preload-responsive-images/\n  return /*#__PURE__*/_react.default.createElement(_head.default, null, /*#__PURE__*/_react.default.createElement(\"link\", {\n    rel: \"preload\",\n    as: \"image\",\n    href: computeSrc(src, unoptimized, width, quality) // @ts-ignore: imagesrcset and imagesizes not yet in the link element type\n    ,\n    imagesrcset: generateSrcSet({\n      src,\n      unoptimized,\n      width,\n      quality\n    }),\n    imagesizes: sizes\n  }));\n}\n\nfunction getInt(x) {\n  if (typeof x === 'number') {\n    return x;\n  }\n\n  if (typeof x === 'string') {\n    return parseInt(x, 10);\n  }\n\n  return undefined;\n}\n\nfunction Image(_ref) {\n  let {\n    src,\n    sizes,\n    unoptimized = false,\n    priority = false,\n    loading,\n    className,\n    quality,\n    width,\n    height,\n    unsized\n  } = _ref,\n      rest = (0, _objectWithoutPropertiesLoose2.default)(_ref, [\"src\", \"sizes\", \"unoptimized\", \"priority\", \"loading\", \"className\", \"quality\", \"width\", \"height\", \"unsized\"]);\n  const thisEl = (0, _react.useRef)(null);\n\n  if (false) {\n    if (!src) {\n      throw new Error(`Image is missing required \"src\" property. Make sure you pass \"src\" in props to the \\`next/image\\` component. Received: ${JSON.stringify({\n        width,\n        height,\n        quality,\n        unsized\n      })}`);\n    }\n\n    if (!VALID_LOADING_VALUES.includes(loading)) {\n      throw new Error(`Image with src \"${src}\" has invalid \"loading\" property. Provided \"${loading}\" should be one of ${VALID_LOADING_VALUES.map(String).join(',')}.`);\n    }\n\n    if (priority && loading === 'lazy') {\n      throw new Error(`Image with src \"${src}\" has both \"priority\" and \"loading=lazy\" properties. Only one should be used.`);\n    }\n  }\n\n  let lazy = loading === 'lazy';\n\n  if (!priority && typeof loading === 'undefined') {\n    lazy = true;\n  }\n\n  (0, _react.useEffect)(() => {\n    const target = thisEl.current;\n\n    if (target && lazy) {\n      const observer = getObserver();\n\n      if (observer) {\n        observer.observe(target);\n        return () => {\n          observer.unobserve(target);\n        };\n      }\n    }\n  }, [thisEl, lazy]);\n  const widthInt = getInt(width);\n  const heightInt = getInt(height);\n  const qualityInt = getInt(quality);\n  let divStyle;\n  let imgStyle;\n  let wrapperStyle;\n\n  if (typeof widthInt !== 'undefined' && typeof heightInt !== 'undefined' && !unsized) {\n    // <Image src=\"i.png\" width={100} height={100} />\n    // <Image src=\"i.png\" width=\"100\" height=\"100\" />\n    const quotient = heightInt / widthInt;\n    const ratio = isNaN(quotient) ? 1 : quotient * 100;\n    wrapperStyle = {\n      maxWidth: '100%',\n      width: widthInt\n    };\n    divStyle = {\n      position: 'relative',\n      paddingBottom: `${ratio}%`\n    };\n    imgStyle = {\n      visibility: lazy ? 'hidden' : 'visible',\n      height: '100%',\n      left: '0',\n      position: 'absolute',\n      top: '0',\n      width: '100%'\n    };\n  } else if (typeof widthInt === 'undefined' && typeof heightInt === 'undefined' && unsized) {\n    // <Image src=\"i.png\" unsized />\n    if (false) {\n      if (priority) {\n        // <Image src=\"i.png\" unsized priority />\n        console.warn(`Image with src \"${src}\" has both \"priority\" and \"unsized\" properties. Only one should be used.`);\n      }\n    }\n  } else {\n    // <Image src=\"i.png\" />\n    if (false) {\n      throw new Error(`Image with src \"${src}\" must use \"width\" and \"height\" properties or \"unsized\" property.`);\n    }\n  } // Generate attribute values\n\n\n  const imgSrc = computeSrc(src, unoptimized, widthInt, qualityInt);\n  const imgSrcSet = generateSrcSet({\n    src,\n    width: widthInt,\n    unoptimized,\n    quality: qualityInt\n  });\n  let imgAttributes;\n\n  if (!lazy) {\n    imgAttributes = {\n      src: imgSrc\n    };\n\n    if (imgSrcSet) {\n      imgAttributes.srcSet = imgSrcSet;\n    }\n  } else {\n    imgAttributes = {\n      'data-src': imgSrc\n    };\n\n    if (imgSrcSet) {\n      imgAttributes['data-srcset'] = imgSrcSet;\n    }\n\n    className = className ? className + ' __lazy' : '__lazy';\n  } // No need to add preloads on the client side--by the time the application is hydrated,\n  // it's too late for preloads\n\n\n  const shouldPreload = priority && true;\n  return /*#__PURE__*/_react.default.createElement(\"div\", {\n    style: wrapperStyle\n  }, /*#__PURE__*/_react.default.createElement(\"div\", {\n    style: divStyle\n  }, shouldPreload ? generatePreload({\n    src,\n    width: widthInt,\n    unoptimized,\n    sizes,\n    quality: qualityInt\n  }) : '', /*#__PURE__*/_react.default.createElement(\"img\", Object.assign({}, rest, imgAttributes, {\n    className: className,\n    sizes: sizes,\n    ref: thisEl,\n    style: imgStyle\n  }))));\n} //BUILT IN LOADERS\n\n\nfunction normalizeSrc(src) {\n  return src[0] === '/' ? src.slice(1) : src;\n}\n\nfunction imgixLoader({\n  root,\n  src,\n  width,\n  quality\n}) {\n  const params = ['auto=format', 'w=' + width];\n  let paramsString = '';\n\n  if (quality) {\n    params.push('q=' + quality);\n  }\n\n  if (params.length) {\n    paramsString = '?' + params.join('&');\n  }\n\n  return `${root}${normalizeSrc(src)}${paramsString}`;\n}\n\nfunction akamaiLoader({\n  root,\n  src,\n  width\n}) {\n  return `${root}${normalizeSrc(src)}?imwidth=${width}`;\n}\n\nfunction cloudinaryLoader({\n  root,\n  src,\n  width,\n  quality\n}) {\n  const params = ['f_auto', 'w_' + width];\n  let paramsString = '';\n\n  if (quality) {\n    params.push('q_' + quality);\n  }\n\n  if (params.length) {\n    paramsString = params.join(',') + '/';\n  }\n\n  return `${root}${paramsString}${normalizeSrc(src)}`;\n}\n\nfunction defaultLoader({\n  root,\n  src,\n  width,\n  quality\n}) {\n  if (false) {\n    const missingValues = []; // these should always be provided but make sure they are\n\n    if (!src) missingValues.push('src');\n    if (!width) missingValues.push('width');\n\n    if (missingValues.length > 0) {\n      throw new Error(`Next Image Optimization requires ${missingValues.join(', ')} to be provided. Make sure you pass them as props to the \\`next/image\\` component. Received: ${JSON.stringify({\n        src,\n        width,\n        quality\n      })}`);\n    }\n\n    if (src && !src.startsWith('/') && configDomains) {\n      let parsedSrc;\n\n      try {\n        parsedSrc = new URL(src);\n      } catch (err) {\n        console.error(err);\n        throw new Error(`Failed to parse \"${src}\" if using relative image it must start with a leading slash \"/\" or be an absolute URL`);\n      }\n\n      if (!configDomains.includes(parsedSrc.hostname)) {\n        throw new Error(`Invalid src prop (${src}) on \\`next/image\\`, hostname is not configured under images in your \\`next.config.js\\``);\n      }\n    }\n  }\n\n  return `${root}?url=${encodeURIComponent(src)}&w=${width}&q=${quality || 75}`;\n}","map":null,"metadata":{},"sourceType":"script"}
{"ast":null,"code":"var _jsxFileName = \"/Users/martinvielvoye/a-blog-nextdoor/client/pages/Reflections/[reflection_name].js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState, useEffect, Component } from \"react\";\nimport { BrowserRouter as Router, Link } from \"react-router-dom\";\nimport { useRouter } from \"next/router\";\nimport Image from \"next/image\";\nimport ReactDOM from \"react-dom\";\nimport ReactHtmlParser from \"react-html-parser\";\nimport showdown from \"showdown\";\nconst converter = new showdown.Converter(); // import path from \"path\";\n\nconst Reflection = () => {\n  _s();\n\n  const {\n    0: reflectionState,\n    1: updateReflectionState\n  } = useState();\n  const router = useRouter();\n  const {\n    reflection_name\n  } = router.query; // Retrieves the list of items from the Express app\n\n  let title = \"Loading...\";\n\n  const getReflection = () => {\n    fetch(\"/reflections/\" + reflection_name).then(res => {\n      return res.text();\n    }).then(data => {\n      console.log(converter.makeHtml(data));\n      updateReflectionState(data);\n    });\n  };\n\n  useEffect(() => {\n    getReflection();\n  }, [reflectionState, title, reflection_name]);\n  getReflection();\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 5\n    }\n  }, reflectionState ? __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }\n  }, ReactHtmlParser(reflectionState)) : __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }\n  }));\n};\n\n_s(Reflection, \"zngVoRGIE/qGU7QUGy9t0nh86vU=\", false, function () {\n  return [useRouter];\n});\n\n_c = Reflection;\nexport default Reflection;\n\nvar _c;\n\n$RefreshReg$(_c, \"Reflection\");","map":{"version":3,"sources":["/Users/martinvielvoye/a-blog-nextdoor/client/pages/Reflections/[reflection_name].js"],"names":["React","useState","useEffect","Component","BrowserRouter","Router","Link","useRouter","Image","ReactDOM","ReactHtmlParser","showdown","converter","Converter","Reflection","reflectionState","updateReflectionState","router","reflection_name","query","title","getReflection","fetch","then","res","text","data","console","log","makeHtml"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,SAArC,QAAsD,OAAtD;AACA,SAASC,aAAa,IAAIC,MAA1B,EAAkCC,IAAlC,QAA8C,kBAA9C;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,OAAOC,KAAP,MAAkB,YAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAOC,QAAP,MAAqB,UAArB;AAEA,MAAMC,SAAS,GAAG,IAAID,QAAQ,CAACE,SAAb,EAAlB,C,CAEA;;AAEA,MAAMC,UAAU,GAAG,MAAM;AAAA;;AACvB,QAAM;AAAA,OAACC,eAAD;AAAA,OAAkBC;AAAlB,MAA2Cf,QAAQ,EAAzD;AACA,QAAMgB,MAAM,GAAGV,SAAS,EAAxB;AACA,QAAM;AAAEW,IAAAA;AAAF,MAAsBD,MAAM,CAACE,KAAnC,CAHuB,CAKvB;;AACA,MAAIC,KAAK,GAAG,YAAZ;;AACA,QAAMC,aAAa,GAAG,MAAM;AAC1BC,IAAAA,KAAK,CAAC,kBAAkBJ,eAAnB,CAAL,CACGK,IADH,CACSC,GAAD,IAAS;AACb,aAAOA,GAAG,CAACC,IAAJ,EAAP;AACD,KAHH,EAIGF,IAJH,CAISG,IAAD,IAAU;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAahB,SAAS,CAACiB,QAAV,CAAmBH,IAAnB,CAAb;AACAV,MAAAA,qBAAqB,CAACU,IAAD,CAArB;AACD,KAPH;AAQD,GATD;;AAWAxB,EAAAA,SAAS,CAAC,MAAM;AACdmB,IAAAA,aAAa;AACd,GAFQ,EAEN,CAACN,eAAD,EAAkBK,KAAlB,EAAyBF,eAAzB,CAFM,CAAT;AAIAG,EAAAA,aAAa;AAEb,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGN,eAAe,GACd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEGL,eAAe,CAACK,eAAD,CAFlB,CADc,GAMd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPJ,CADF;AAYD,CApCD;;GAAMD,U;UAEWP,S;;;KAFXO,U;AAsCN,eAAeA,UAAf","sourcesContent":["import React, { useState, useEffect, Component } from \"react\";\nimport { BrowserRouter as Router, Link } from \"react-router-dom\";\nimport { useRouter } from \"next/router\";\nimport Image from \"next/image\";\nimport ReactDOM from \"react-dom\";\nimport ReactHtmlParser from \"react-html-parser\";\nimport showdown from \"showdown\"\n\nconst converter = new showdown.Converter();\n\n// import path from \"path\";\n\nconst Reflection = () => {\n  const [reflectionState, updateReflectionState] = useState();\n  const router = useRouter()\n  const { reflection_name } = router.query\n\n  // Retrieves the list of items from the Express app\n  let title = \"Loading...\";\n  const getReflection = () => {\n    fetch(\"/reflections/\" + reflection_name)\n      .then((res) => {\n        return res.text();\n      })\n      .then((data) => {\n        console.log( converter.makeHtml(data));\n        updateReflectionState(data);\n      });\n  };\n\n  useEffect(() => {\n    getReflection();\n  }, [reflectionState, title, reflection_name]);\n\n  getReflection();\n\n  return (\n    <div>\n      {reflectionState ? (\n        <div>\n          {/* <div dangerouslySetInnerHTML={{ __html: reflectionState }} /> */}\n          {ReactHtmlParser(reflectionState)}\n        </div>\n      ) : (\n        <div></div>\n      )}\n    </div>\n  );\n};\n\nexport default Reflection\n"]},"metadata":{},"sourceType":"module"}
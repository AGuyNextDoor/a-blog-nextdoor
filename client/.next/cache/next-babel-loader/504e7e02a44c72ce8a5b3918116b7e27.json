{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useEffect, Component } from \"react\";\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport ReactHtmlParser from \"react-html-parser\";\n\nconst Reflections = ({\n  match,\n  location\n}) => {\n  const {\n    0: listState,\n    1: updateListState\n  } = useState([]);\n\n  const getList = () => {\n    fetch(\"/api/getReflectionList\").then(res => res.json()).then(list => updateListState(list));\n  };\n\n  useEffect(() => {\n    getList();\n  }, []);\n  return __jsx(\"div\", null, __jsx(\"ul\", {\n    class: \"navbar-nav\"\n  }, location.pathname.length < 13 ? __jsx(\"div\", null, __jsx(\"ul\", null, __jsx(\"li\", null, \"Choose your article on the sidebar\"))) : __jsx(\"div\", null)), __jsx(Route, {\n    path: `${match.url}/:reflectionId`,\n    component: Reflection\n  }));\n};\n\nconst Reflection = ({\n  match\n}) => {\n  const {\n    0: reflectionState,\n    1: updateReflectionState\n  } = useState(); // Retrieves the list of items from the Express app\n\n  let title = \"Loading...\";\n\n  const getReflection = () => {\n    fetch(\"/api/getReflection/\" + match.params.reflectionId).then(res => {\n      return res.json();\n    }).then(data => {\n      title = match.params.reflectionId;\n      updateReflectionState(data[1]);\n    });\n  };\n\n  useEffect(() => {\n    getReflection();\n  }, [reflectionState, title, match.params.reflectionId]);\n  getReflection();\n  return __jsx(\"div\", null, reflectionState ? __jsx(\"div\", null, ReactHtmlParser(reflectionState)) : __jsx(\"div\", null));\n};\n\nexport default Reflections;","map":null,"metadata":{},"sourceType":"module"}